// src/App.js

/* ==========================================================================
   App.css Ïó∞Îèô Î∞è ÌååÏùº Íµ¨ÏÑ± ÏïàÎÇ¥
   ÏûëÏÑ± Í∞ÄÏù¥Îìú:
   - Î≥∏ ÌååÏùºÏùÄ Ìôà(Ïû¨Í≥†) + Í∏∞Î°ù ÌéòÏù¥ÏßÄ + Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÎûòÌçºÎ•º Ìè¨Ìï®Ìïú Îã®Ïùº App.jsÏûÖÎãàÎã§.
   - ‚ÄúÏ†ÑÏ≤¥‚Äù Ïπ¥ÎìúÎäî Ïû•ÏÜå Ïπ¥Îìú Í∑∏Î¶¨Îìú ÎÇ¥Î∂ÄÏóê Ìè¨Ìï®ÎêòÏñ¥ 2Ïó¥ Ïù¥ÏÉÅÏóêÏÑú 2√ó2 Î∞∞Ïó¥Ïù¥ ÎêòÎèÑÎ°ù Ìï©ÎãàÎã§.
   - Firebase RTDB: inventoryÎäî set Ï†ÑÏ≤¥ Ï†ÄÏû•, logsÎäî push/update/removeÎßå.
   - ÏÑπÏÖòÎ≥Ñ Ï£ºÏÑùÏùÑ Ïú†ÏßÄÌï¥ Í∞ÄÎèÖÏÑ±Í≥º ÌöåÍ∑Ä ÌÖåÏä§Ìä∏Î•º Ïö©Ïù¥ÌïòÍ≤å Ìï©ÎãàÎã§.
   ========================================================================== */

// src/App.js ‚Äî ÌÜµÌï©Î≥∏ (ÏàòÏ†ï/ÌîÑÎ°¨ÌîÑÌä∏ Ï†ïÏÉÅ, 2√ó2 Ïú†ÏßÄ, ‚â•1100pxÏóêÏÑú "Ï†ÑÏ≤¥" Ï§ëÏïô)
import React, { useState, useEffect, useRef, useMemo } from "react";
import { HashRouter as Router, Routes, Route, useNavigate, Navigate } from "react-router-dom";
import * as XLSX from "xlsx";
import "./App.css";
import LoginPage from "./LoginPage";
import { Toaster, toast } from "react-hot-toast";

/* Firebase ÎûòÌçº */
import { ref, set, onValue, push, update, remove } from "./firebase";

// PATCH: src/App.js (imports ÏïÑÎûò, ÌååÏùº ÏµúÏÉÅÎã® Í∑ºÏ≤òÏóê Ï∂îÍ∞Ä)
const APP_VERSION =
  process.env.REACT_APP_VERSION ||
  localStorage.getItem("do-kkae-bi-app-version") ||
  "dev";


/* =========================
   1) Ïπ¥ÌÖåÍ≥†Î¶¨/Ïä§ÌÇ§Îßà Ï†ïÏùò
   ========================= */
const locations = ["ÎèôÏïÑÎ¶¨Î∞©", "ÎπÑÌñâÏû•", "ÍµêÏàòÎãòÎ∞©"];

const subcategories = {
  Í≥µÍµ¨: ["ÏàòÎ¶¨", "ÎÇ©Îïú Ïö©Ìíà", "ÎìúÎùºÏù¥Î≤Ñ", "Í∑∏Ïô∏ Í≥µÍµ¨"],
  ÏÜåÎ™®Ìíà: {
    "Ïπ¥Î≥∏ ÌîÑÎ†àÏûÑ": [],
    "ÌéúÌÉÄ Í∞ÄÎìú": { ÏÉàÍ±∞: [], Ï§ëÍ≥†: [], Í∏∞ÌÉÄ: [] },
    "ÏºÄÏù¥Î∏î ÌÉÄÏù¥": { "100ÌîºÏä§": [], "1000ÌîºÏä§": [], "1000ÌîºÏä§_Ï§ëÍ≥†": [] },
    ÌîÑÎ°úÌé†Îü¨: { ÏÉàÍ±∞: [], Ï§ëÍ≥†: [] },
    XTÏª§ÎÑ•ÌÑ∞: [],
    Î≥ºÌä∏ÎÑàÌä∏: [],
    "ÎÇ©Îïú Í¥ÄÎ†®": [],
    Î≤®ÌÅ¨Î°ú: [],
    Î∞∞ÌÑ∞Î¶¨: { Í∏∞Ï≤¥: [], Ï∂©Ï†ÑÍ∏∞: [], Ï°∞Ï¢ÖÍ∏∞: [], Í∏∞ÌÉÄ: [] },
    LED: { ÌõÑÎ∞©: [], ÏÉÅÎ∂Ä: [], "Ìè¨ÏßÄÏÖò Í¥ÄÎ†®": [], ÎùºÏö¥Îìú: [] },
    ÌÖåÏù¥ÌîÑ: { ÌïÑÎùºÎ©òÌä∏: [], ÏñëÎ©¥: [], "Ï¢ÖÏù¥&ÎßàÏä§ÌÇπ": [], Ï†àÏó∞: [], "Í∑∏Ïô∏ ÌÖåÏù¥ÌîÑ": [] },
    "Í∑∏Ïô∏ ÏÜåÎ™®Ìíà": [],
  },
  "ÎìúÎ°† Ï†úÏñ¥Î∂Ä": ["FC", "FC ESC Ïó∞Í≤∞ÏÑ†", "ESC", "Î™®ÌÑ∞", "ÏàòÏã†Í∏∞", "ÏΩòÎç¥ÏÑú", "Ï†úÏñ¥Î∂Ä ÏÑ∏Ìä∏"],
  "Ï°∞Ï¢ÖÍ∏∞ Í∞úÏàò": ["ÌïôÍµê", "Í∞úÏù∏"],
  "Í∏∞Ï≤¥ Í∞úÏàò": ["ÌïôÍµê", "Í∞úÏù∏"],
};

/* ÏïÑÏù¥ÏΩò */
const catIcons = {
  Í≥µÍµ¨: "üõ†Ô∏è",
  ÏÜåÎ™®Ìíà: "üî©",
  "ÎìúÎ°† Ï†úÏñ¥Î∂Ä": "üß†",
  "Ï°∞Ï¢ÖÍ∏∞ Í∞úÏàò": "üéÆ",
  "Í∏∞Ï≤¥ Í∞úÏàò": "üöÅ",
};
const catIcon = (cat) => catIcons[cat] || "üì¶";

// PATCH: src/App.js  (2) LocalStorage helpers Ï†ÑÏ≤¥ ÍµêÏ≤¥
/* =========================
   2) LocalStorage helpers
   ========================= */
function getLocalInventory() {
  const d = localStorage.getItem("do-kkae-bi-inventory");
  if (d) return JSON.parse(d);

  // ÏµúÏ¥à Í∏∞Îèô Ïãú Ïä§ÌÇ§Îßà ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
  const base = {};
  locations.forEach((loc) => {
    base[loc] = {};
    Object.entries(subcategories).forEach(([cat, subs]) => {
      base[loc][cat] = base[loc][cat] || {};
      if (Array.isArray(subs)) {
        subs.forEach((sub) => (base[loc][cat][sub] = []));
      } else {
        Object.entries(subs).forEach(([sub, subs2]) => {
          if (Array.isArray(subs2)) {
            base[loc][cat][sub] = [];
          } else {
            base[loc][cat][sub] = {};
            Object.keys(subs2).forEach((sub2) => (base[loc][cat][sub][sub2] = []));
          }
        });
      }
    });
  });
  return base;
}
function saveLocalInventory(data) {
  localStorage.setItem("do-kkae-bi-inventory", JSON.stringify(data));
}
function getLocalLogs() {
  const d = localStorage.getItem("do-kkae-bi-logs");
  return d ? JSON.parse(d) : [];
}
function saveLocalLogs(data) {
  localStorage.setItem("do-kkae-bi-logs", JSON.stringify(data));
}
function getLocalAdmin() {
  return localStorage.getItem("do-kkae-bi-admin") === "true";
}
function saveLocalAdmin(val) {
  localStorage.setItem("do-kkae-bi-admin", val ? "true" : "false");
}
function getLocalUserId() {
  return localStorage.getItem("do-kkae-bi-user-id") || "";
}
function getLocalUserName() {
  return localStorage.getItem("do-kkae-bi-user-name") || "";
}

/** ÏÑ∏ÏÖò(Í¥ÄÎ¶¨Ïûê/UID/Ïù¥Î¶Ñ) ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî ‚Äî Ï†ÑÏó≠ Ïú†Ìã∏ */
function clearLocalSession() {
  try {
    localStorage.removeItem("do-kkae-bi-user-id");
    localStorage.removeItem("do-kkae-bi-user-name");
  } catch (e) {
    console.warn("clearLocalSession warning:", e);
  }
  try {
    localStorage.setItem("do-kkae-bi-admin", "false");
  } catch (e) {
    console.warn("saveLocalAdmin(false) fallback:", e);
  }
}

/** Í∞ïÏ†ú Î°úÍ∑∏ÏïÑÏõÉ ‚Äî Ï†ÑÏó≠ Ïú†Ìã∏(HashRouter Í∏∞Ï§Ä) */
function hardLogout() {
  clearLocalSession();
  window.location.hash = "#/login";
  window.location.reload();
}


/* =========================
   3) Í≥†Ï†ï Î∞∞Í≤Ω / ÎÑ§Ïò®
   ========================= */
function FixedBg({
  src,
  overlay = null,
  maxW = "min(85vw, 1200px)",
  maxH = "min(70vh, 800px)",
  minW = "360px",
  minH = "220px",
  opacity = 0.95,
}) {
  return (
    <>
      <div className="fixed-bg">
        <img
          src={src}
          alt=""
          className="fixed-bg-img"
          style={{ maxWidth: maxW, maxHeight: maxH, minWidth: minW, minHeight: minH, opacity }}
        />
      </div>
      {overlay && <div className="fixed-bg-overlay" style={{ background: overlay }} />}
    </>
  );
}
function NeonBackdrop() {
  return (
    <>
      <div className="bg-aurora" aria-hidden />
      <div className="bg-grid" aria-hidden />
    </>
  );
}

/* =========================
   4) Í≥µÏö© Ïú†Ìã∏
   ========================= */
function normalizeLogsVal(val) {
  if (!val) return [];
  if (Array.isArray(val)) {
    return Object.entries(val)
      .filter(([, v]) => v)
      .map(([k, v]) => ({ id: String(k), ...v }));
  }
  if (typeof val === "object") {
    return Object.entries(val)
      .filter(([, v]) => v)
      .map(([k, v]) => ({ id: k, ...v }));
  }
  return [];
}
function getItems(inv, loc, cat, sub, sub2) {
  const node = (((inv || {})[loc] || {})[cat] || {})[sub];
  if (!node) return [];
  if (sub2 && node && !Array.isArray(node)) return node[sub2] || [];
  return Array.isArray(node) ? node : [];
}
function ensureItems(inv, loc, cat, sub, sub2) {
  inv[loc] = inv[loc] || {};
  inv[loc][cat] = inv[loc][cat] || {};
  if (sub2) {
    inv[loc][cat][sub] = inv[loc][cat][sub] || {};
    inv[loc][cat][sub][sub2] = inv[loc][cat][sub][sub2] || [];
    return inv[loc][cat][sub][sub2];
  } else {
    inv[loc][cat][sub] = inv[loc][cat][sub] || [];
    return inv[loc][cat][sub];
  }
}
const subPath = (sub, sub2) => (sub2 ? `${sub}/${sub2}` : sub);

// PATCH: src/App.js (Í≥µÏö© Ïú†Ìã∏ Í∑ºÏ≤òÏóê Ï∂îÍ∞Ä)
function createEmptyInventory() {
  const base = {};
  locations.forEach((loc) => {
    base[loc] = {};
    Object.entries(subcategories).forEach(([cat, subs]) => {
      base[loc][cat] = {};
      if (Array.isArray(subs)) {
        subs.forEach((sub) => (base[loc][cat][sub] = []));
      } else {
        Object.entries(subs).forEach(([sub, subs2]) => {
          if (Array.isArray(subs2)) {
            base[loc][cat][sub] = [];
          } else {
            base[loc][cat][sub] = {};
            Object.keys(subs2).forEach((sub2) => (base[loc][cat][sub][sub2] = []));
          }
        });
      }
    });
  });
  return base;
}

/** Firebase Í∏àÏßÄ Î¨∏ÏûêÎ•º Ìè¨Ìï®ÌïòÍ±∞ÎÇò Îπà Î¨∏ÏûêÏó¥Ïù∏ ÌÇ§ Ï†úÍ±∞ */
const FORBIDDEN_KEY_RE = /[.#$/[\]]/;

function sanitizeInventoryKeys(src) {
  const inv = JSON.parse(JSON.stringify(src));
  const bad = [];

  const delIfBad = (obj, key, path) => {
    if (!key || FORBIDDEN_KEY_RE.test(key)) {
      delete obj[key];
      bad.push(`${path}${key === "" ? "(empty)" : key}`);
      return true;
    }
    return false;
  };

  Object.keys(inv || {}).forEach((loc) => {
    if (delIfBad(inv, loc, "inventory/")) return;
    const cats = inv[loc] || {};
    Object.keys(cats).forEach((cat) => {
      if (delIfBad(cats, cat, `inventory/${loc}/`)) return;
      const subs = cats[cat] || {};
      Object.keys(subs).forEach((sub) => {
        if (delIfBad(subs, sub, `inventory/${loc}/${cat}/`)) return;
        const node = subs[sub];
        if (Array.isArray(node)) return;
        if (node && typeof node === "object") {
          Object.keys(node).forEach((sub2) => {
            if (delIfBad(node, sub2, `inventory/${loc}/${cat}/${sub}/`)) return;
            // Î¶¨ÌîÑÎäî Î∞òÎìúÏãú Î∞∞Ïó¥ Î≥¥Ïû•
            if (!Array.isArray(node[sub2])) node[sub2] = [];
          });
        } else {
          // Íµ¨Ï°∞Í∞Ä ÎßùÍ∞ÄÏ°åÏúºÎ©¥ Î∞∞Ïó¥Î°ú Î≥µÍµ¨
          subs[sub] = [];
        }
      });
    });
  });

  return { inv, bad };
}



/* =========================
   5) Ìôà(Ïû¨Í≥†) ÌôîÎ©¥
   ========================= */
function Home({
  inventory,
  setInventory,
  searchTerm,
  setSearchTerm,
  logs,
  setLogs,
  isAdmin,
  userId,
  userName,
}) {
  
    // PATCH: src/App.js (Home Ïª¥Ìè¨ÎÑåÌä∏ ÏÉÅÎã® ÏßÄÏó≠ ÏÉÅÌÉú/refs Í∑ºÏ≤ò)
  const resetAllRef = useRef(false);
  const navigate = useNavigate();
  const categoryRefs = useRef({});
  const cardRefs = useRef({});
  const [syncing, setSyncing] = useState(false);

  const [dataMenuOpen, setDataMenuOpen] = useState(false);
  const dataMenuRef = useRef(null);
  const [openPanel, setOpenPanel] = useState(null);
  const [editKey, setEditKey] = useState(null);

  // PATCH: src/App.js  (Home Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥Î∂Ä normalizeRow ÍµêÏ≤¥)

// ÏãúÌä∏ ‚Üí JSON Î°úÏö∞ ÌååÏã±(Ìó§Îçî Ïú†Ïó∞ + 'nan' Îì± ÎπàÍ∞í Ï≤òÎ¶¨)
function normalizeRow(r) {
  const get = (...keys) => {
    for (const k of keys) {
      if (r[k] !== undefined) return r[k];
      // Í≥µÎ∞±/ÎåÄÏÜåÎ¨∏Ïûê Î¨¥ÏãúÌïú ÌÇ§ Îß§Ïπ≠
      const rk = Object.keys(r).find(
        (x) => String(x).trim().toLowerCase() === String(k).trim().toLowerCase()
      );
      if (rk && r[rk] !== undefined) return r[rk];
    }
    return "";
  };

  // ÎπàÍ∞í/NaN ÌÜ†ÌÅ∞ Ï†ïÎ¶¨
  const clean = (v) => {
    if (v === null || v === undefined) return "";
    let s = String(v).trim();
    if (!s) return "";
    const L = s.toLowerCase();
    // ÏóëÏÖÄ/ÌåêÎã§Ïä§ÏóêÏÑú ÏÉùÍ∏∞Îäî ÌÜ†ÌÅ∞Îì§ÏùÑ ÎπàÍ∞íÏúºÎ°ú Í∞ÑÏ£º
    if (L === "nan" || L === "na" || L === "n/a" || L === "-") return "";
    return s;
  };

  const loc  = clean(get("Ïû•ÏÜå","ÏúÑÏπò","place","Place","LOCATION","location"));
  const cat  = clean(get("ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨","ÎåÄÎ∂ÑÎ•ò","Ïπ¥ÌÖåÍ≥†Î¶¨","Category","category"));
  const sub  = clean(get("ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨","Ï§ëÎ∂ÑÎ•ò","Subcategory","subcategory"));
  const sub2 = clean(get("ÏµúÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨","ÏÜåÎ∂ÑÎ•ò","SubSubcategory","subsubcategory","Sub2","ÏÜåÎ∂ÑÎ•ò(ÌïÑÏöîÏãú)"));
  const name = clean(get("ÌíàÎ™©Î™Ö","ÌíàÎ™Ö","Ìï≠Î™©","ÏïÑÏù¥ÌÖú","item","Item","ÌíàÎ™©"));
  const note = clean(get("Î©îÎ™®","ÎπÑÍ≥†","ÏÑ§Î™Ö","Note","note","ÎπÑÍ≥†(ÏÑ†ÌÉù)"));

  let qtyRaw = get("ÏàòÎüâ","Í∞úÏàò","ÏàòÎüâ(Í∞ú)","Ïàò Îüâ","ÏàòÎüâÌï©Í≥Ñ","Qty","qty","Quantity","quantity");
  let qty = Number(qtyRaw ?? 0);
  if (!Number.isFinite(qty)) qty = 0;

  return { loc, cat, sub, sub2, name, note, qty };
}
// PATCH: src/App.js (Home Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ - ÏùºÍ¥Ñ Ï∂îÍ∞Ä Î≤†ÌÉÄ ÌïµÏã¨ Î°úÏßÅ)

// ÏóÖÎ°úÎìúÏö© ÌååÏùº ÏûÖÎ†• ref
const importInputRef = useRef(null);

// Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ΩÎ°ú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
function isValidPath(cat, sub, sub2) {
  const def = subcategories[cat];
  if (!def) return false;

  if (Array.isArray(def)) {
    // 2Îã® (ÏÉÅÏúÑ-ÌïòÏúÑ)
    return !!sub && def.includes(sub) && (!sub2 || sub2 === "");
  }

  if (def && typeof def === "object") {
    if (!sub || !Object.prototype.hasOwnProperty.call(def, sub)) return false;
    const leaf = def[sub];
    if (Array.isArray(leaf)) {
      // 2Îã®(Í∞ùÏ≤¥Ïùò Í∞íÏù¥ Î∞∞Ïó¥Ïù¥Î©¥ ÏµúÌïòÏúÑ ÏóÜÏùå)
      return !sub2 || sub2 === "";
    }
    if (leaf && typeof leaf === "object") {
      // 3Îã®
      return !!sub2 && Object.prototype.hasOwnProperty.call(leaf, sub2);
    }
  }
  return false;
}

// PATCH: src/App.js (Home Ïª¥Ìè¨ÎÑåÌä∏ - Í≤ΩÎ°ú Ï†ïÍ∑úÌôî Ïú†Ìã∏ Ï∂îÍ∞Ä)

// ÌÇ§ ÎπÑÍµêÏö©: ÏÜåÎ¨∏Ïûê + Í≥µÎ∞± Ï†úÍ±∞ + ÌäπÏàòÎ¨∏Ïûê(&,/ Ï†úÍ±∞)
function stripKey(s) {
  return String(s || "")
    .toLowerCase()
    .replace(/\s+/g, "")
    .replace(/[&/]/g, "");
}

// Ïû•ÏÜå/Ïπ¥ÌÖåÍ≥†Î¶¨/ÌïòÏúÑ/ÏµúÌïòÏúÑ Í∞íÏùÑ Ïä§ÌÇ§Îßà ÌÇ§Î°ú Ï†ïÍ∑úÌôî
function canonLocName(loc) {
  const found = locations.find((L) => stripKey(L) === stripKey(loc));
  return found || loc;
}
function canonCatName(cat) {
  const keys = Object.keys(subcategories);
  const found = keys.find((k) => stripKey(k) === stripKey(cat));
  // ÌùîÌïú ÌëúÍ∏∞ Ï∞®Ïù¥ Î™á Í∞ú Î≥¥Ï†ï (ÏÑ†ÌÉù)
  if (!found) {
    const alt = {
      "ÎìúÎ°†Ï†úÏñ¥Î∂Ä": "ÎìúÎ°† Ï†úÏñ¥Î∂Ä",
      "Ï°∞Ï¢ÖÍ∏∞Í∞úÏàò": "Ï°∞Ï¢ÖÍ∏∞ Í∞úÏàò",
      "Í∏∞Ï≤¥Í∞úÏàò": "Í∏∞Ï≤¥ Í∞úÏàò",
    }[stripKey(cat)];
    if (alt) return alt;
  }
  return found || cat;
}
function canonSubName(cat, sub) {
  const def = subcategories[cat];
  if (!def) return sub;
  const keys = Array.isArray(def) ? def : Object.keys(def);
  // stripKey Í∏∞Î∞ò ÏùºÏπò
  const found = keys.find((k) => stripKey(k) === stripKey(sub));
  // 'ÌîÑÎ°úÌé†Îùº' ‚Üí 'ÌîÑÎ°úÌé†Îü¨' Í∞ôÏùÄ Ï≤†Ïûê Ï∞®Ïù¥ Î≥¥Ï†ï (ÏÑ†ÌÉù)
  if (!found && stripKey(sub) === "ÌîÑÎ°úÌé†Îùº") {
    const alt = keys.find((k) => stripKey(k) === "ÌîÑÎ°úÌé†Îü¨");
    if (alt) return alt;
  }
  return found || sub;
}
function canonSub2Name(cat, sub, sub2) {
  const def = subcategories[cat];
  if (!def || Array.isArray(def)) return "";
  const leaf = def[sub];
  if (!leaf || Array.isArray(leaf)) return "";
  const keys = Object.keys(leaf);
  const found = keys.find((k) => stripKey(k) === stripKey(sub2));
  // Ïòà: 'Ï¢ÖÏù¥ÎßàÏä§ÌÇπ' ‚Üî 'Ï¢ÖÏù¥&ÎßàÏä§ÌÇπ'
  return found || sub2;
}


// ÏóÖÎ°úÎìú Î≤ÑÌäº ÌÅ¥Î¶≠
// PATCH: src/App.js (handleImportClick ÍµêÏ≤¥)
function handleImportClick(e) {
  e.preventDefault(); e.stopPropagation();
  const ok = window.confirm(
    "‚ö†Ô∏è ÏùºÍ¥Ñ Ï∂îÍ∞Ä(Î≤†ÌÉÄ)\n\n" +
    "- Î°úÍ∑∏Î•º ÎÇ®Í∏∞ÏßÄ ÏïäÍ≥† Ïû¨Í≥†Îßå Î≥ÄÍ≤ΩÌï©ÎãàÎã§.\n" +
    "- Ïã§Ìñâ Ï†Ñ 'Ïû¨Í≥† Excel ÎÇ¥Î≥¥ÎÇ¥Í∏∞'Î°ú Î∞±ÏóÖÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.\n\n" +
    "Í≥ÑÏÜçÌï†ÍπåÏöî?"
  );
  if (!ok) return;

  // ‚¨á ÏÑ†ÌÉù: Ï¥àÍ∏∞Ìôî ÌõÑ Ï†ÅÏö© Î™®Îìú
  resetAllRef.current = window.confirm(
    "Ï†ÑÏ≤¥ Ïû¨Í≥†Î•º Ï¥àÍ∏∞Ìôî(0)Ìïú Îí§ ÏóÖÎ°úÎìú ÌååÏùºÎ°ú ÎçÆÏñ¥Ïì∏ÍπåÏöî?\n" +
    "ÏïÑÎãàÏò§Î•º ÎàÑÎ•¥Î©¥ Í∏∞Ï°¥ Ïû¨Í≥†Ïóê Ìï©ÏÇ∞/Ï∂îÍ∞ÄÌï©ÎãàÎã§."
  );

  importInputRef.current?.click();
}


// ÌååÏùº ÏóÖÎ°úÎìú ÌõÑ Î≥ëÌï©
async function onImportFileChange(ev) {
  ev.preventDefault(); ev.stopPropagation();
  const file = ev.target.files?.[0];
  ev.target.value = ""; // Í∞ôÏùÄ ÌååÏùº Î∞òÎ≥µ ÏóÖÎ°úÎìú ÌóàÏö©
  setDataMenuOpen(false);
  if (!file) return;

  try {
    const buf = await file.arrayBuffer();
    const wb = XLSX.read(buf, { type: "array" });
    const ws = wb.Sheets[wb.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(ws, { defval: "" });

    if (!rows.length) {
      toast.error("ÏóÖÎ°úÎìú ÏãúÌä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.");
      return;
    }

    let applied = 0, added = 0, increased = 0, invalid = 0;
    const invalidSamples = [];

    // PATCH: src/App.js (onImportFileChange ÎÇ¥Î∂Ä setInventory ÏΩúÎ∞±Ïùò next ÏÉùÏÑ±Î∂ÄÎßå ÏàòÏ†ï)
    setInventory((prev) => {
      const next = resetAllRef.current ? createEmptyInventory() : JSON.parse(JSON.stringify(prev));
      resetAllRef.current = false; // 1ÌöåÏÑ± ÏÇ¨Ïö©
      for (const raw of rows) {
        // src/App.js (Home.onImportFileChange - Í≤ΩÎ°ú Ï†ïÍ∑úÌôî Ï†ÅÏö©)

        // Í∏∞Ï°¥: const { loc, cat, sub, sub2, name, note, qty } = normalizeRow(raw);
        // ÏïÑÎûòÏ≤òÎüº Ï†ïÍ∑úÌôî Í∞íÏùÑ Ï§ÄÎπÑ
        const { loc, cat, sub, sub2, name, note, qty } = normalizeRow(raw);
        const cLoc  = canonLocName(loc);
        const cCat  = canonCatName(cat);
        const cSub  = canonSubName(cCat, sub);
        const cSub2 = sub2 ? canonSub2Name(cCat, cSub, sub2) : "";

        // Ïû•ÏÜå/ÏàòÎüâ/Ïù¥Î¶Ñ Í≤ÄÏ¶ù
        if (!cLoc || !locations.includes(cLoc)) { /* ...Í∑∏ÎåÄÎ°ú... */ }
        if (!name || !Number.isFinite(qty) || qty <= 0) { /* ...Í∑∏ÎåÄÎ°ú... */ }

        // Í≤ΩÎ°ú Í≤ÄÏ¶ùÏùÄ Ï†ïÍ∑úÌôîÎêú Í∞íÏúºÎ°ú!
        if (!isValidPath(cCat, cSub, cSub2)) {
          invalid++;
          if (invalidSamples.length < 5)
            invalidSamples.push(`${cat || "(Îπà)"}>${sub || ""}${sub2 ? ">" + sub2 : ""}`);
          continue;
        }

        // Î≥ëÌï©ÎèÑ Ï†ïÍ∑úÌôîÎêú Í∞íÏúºÎ°ú!
        const arr = ensureItems(next, cLoc, cCat, cSub, cSub2 || undefined);
        const idx = arr.findIndex((it) => String(it.name).trim() === name);
        if (idx >= 0) {
          arr[idx].count = Math.max(0, Number(arr[idx].count || 0) + Number(qty));
          if (note) arr[idx].note = note;
          increased++; applied++;
        } else {
          arr.push({ name, count: Number(qty), ...(note ? { note } : {}) });
          added++; applied++;
        }
      }
      return next;
    });

    toast.success(`ÏùºÍ¥Ñ Ï∂îÍ∞Ä ÏôÑÎ£å: Ï†ÅÏö© ${applied}Í±¥ (Ïã†Í∑ú ${added}, Ï¶ùÍ∞Ä ${increased}) / Î¨¥Ïãú ${invalid}Í±¥`);
    if (invalid) {
      console.warn("[Import skipped examples]", invalidSamples);
      toast((t) => (
        <div>
          ÏùºÎ∂Ä ÌñâÏù¥ Î¨¥ÏãúÎêòÏóàÏäµÎãàÎã§. (Ï¥ù {invalid}Í±¥)
          <div style={{opacity:.8, marginTop:4, fontSize:12}}>
            ÏòàÏãú: {invalidSamples.join(" / ")}
          </div>
          <button className="btn btn-ghost" onClick={() => toast.dismiss(t.id)}>Îã´Í∏∞</button>
        </div>
      ), { duration: 6000 });
    }
  } catch (err) {
    console.error(err);
    toast.error(`Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ${err?.message || String(err)}`);
  }
}


  // ÎèôÍ∏∞Ìôî Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
  useEffect(() => {
    setSyncing(true);
    const t = setTimeout(() => setSyncing(false), 700);
    return () => clearTimeout(t);
  }, [inventory, logs]);

  // Îç∞Ïù¥ÌÑ∞ Î©îÎâ¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Îã´Í∏∞
  useEffect(() => {
    function onClickOutside(e) {
      if (dataMenuRef.current && !dataMenuRef.current.contains(e.target)) setDataMenuOpen(false);
    }
    if (dataMenuOpen) {
      document.addEventListener("mousedown", onClickOutside);
      document.addEventListener("touchstart", onClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", onClickOutside);
      document.removeEventListener("touchstart", onClickOutside);
    };
  }, [dataMenuOpen]);

  // ÌåùÏóÖ Ïó¥Î¶¥ Îïå Ìï¥Îãπ Ïπ¥Îìú ÏúÑÏπòÎ°ú Ïä§ÌÅ¨Î°§
  useEffect(() => {
    if (!openPanel) return;
    const key = openPanel.kind === "summary" ? "summary" : openPanel.loc;
    const el = cardRefs.current[key];
    if (el?.scrollIntoView) el.scrollIntoView({ behavior: "smooth", block: "center" });
  }, [openPanel]);

  // ÏàòÏ†ï Ìå®ÎÑê Î∞îÍπ• ÌÅ¥Î¶≠/ESC Îã´Í∏∞ (Î≤ÑÌäºÍ≥º ÏóêÎîîÌä∏ ÎÇ¥Î∂ÄÎäî ÏòàÏô∏)
  
  // ÌåùÏóÖ Ïó¥Î¶¥ Îïå Î™®Îì† detailsÎ•º Í∞ïÏ†úÎ°ú ÌéºÏπòÍ∏∞
useEffect(() => {
  if (!openPanel) return;
  // Îã§Ïùå ÌîÑÎ†àÏûÑÏóêÏÑú Ïã§ÌñâÌï¥Ïïº DOMÏù¥ Î†åÎçîÎêú Îí§Ïóê Ï†ÅÏö©Îê®
  requestAnimationFrame(() => {
    document.querySelectorAll('.popup details').forEach(d => (d.open = true));
  });
}, [openPanel]);

  useEffect(() => {
    const onDocClick = (e) => {
      if (e.target.closest(".item-edit") || e.target.closest(".btn-compact") || e.target.closest(".item-actions")) return;
      setEditKey(null);
    };
    const onEsc = (e) => { if (e.key === "Escape") setEditKey(null); };
    document.addEventListener("mousedown", onDocClick);
    document.addEventListener("touchstart", onDocClick);
    document.addEventListener("keydown", onEsc);
    return () => {
      document.removeEventListener("mousedown", onDocClick);
      document.removeEventListener("touchstart", onDocClick);
      document.removeEventListener("keydown", onEsc);
    };
  }, []);

  /* ===== ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ===== */
  function exportInventoryExcel() {
    const rows = [];
    const itemTotals = {};
    locations.forEach((loc) => {
      Object.entries(subcategories).forEach(([cat, subs]) => {
        if (Array.isArray(subs)) {
          subs.forEach((sub) => {
            (getItems(inventory, loc, cat, sub) || []).forEach((item) => {
              rows.push({ Ïû•ÏÜå: loc, ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: cat, ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: sub, ÌíàÎ™©Î™Ö: item.name, ÏàòÎüâ: item.count });
              if (!itemTotals[item.name]) itemTotals[item.name] = { Ìï©Í≥Ñ: 0, Ïû•ÏÜåÎ≥Ñ: {} };
              itemTotals[item.name].Ìï©Í≥Ñ += item.count;
              itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] = (itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] || 0) + item.count;
            });
          });
        } else {
          Object.entries(subs).forEach(([sub, subs2]) => {
            if (Array.isArray(subs2)) {
              (getItems(inventory, loc, cat, sub) || []).forEach((item) => {
                rows.push({ Ïû•ÏÜå: loc, ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: cat, ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: sub, ÌíàÎ™©Î™Ö: item.name, ÏàòÎüâ: item.count });
                if (!itemTotals[item.name]) itemTotals[item.name] = { Ìï©Í≥Ñ: 0, Ïû•ÏÜåÎ≥Ñ: {} };
                itemTotals[item.name].Ìï©Í≥Ñ += item.count;
                itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] = (itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] || 0) + item.count;
              });
            } else {
              Object.keys(subs2).forEach((sub2) => {
                (getItems(inventory, loc, cat, sub, sub2) || []).forEach((item) => {
                  rows.push({
                    Ïû•ÏÜå: loc, ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: cat, ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: `${sub}/${sub2}`, ÌíàÎ™©Î™Ö: item.name, ÏàòÎüâ: item.count,
                  });
                  if (!itemTotals[item.name]) itemTotals[item.name] = { Ìï©Í≥Ñ: 0, Ïû•ÏÜåÎ≥Ñ: {} };
                  itemTotals[item.name].Ìï©Í≥Ñ += item.count;
                  itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] = (itemTotals[item.name].Ïû•ÏÜåÎ≥Ñ[loc] || 0) + item.count;
                });
              });
            }
          });
        }
      });
    });

    rows.sort((a, b) => {
      if (a.Ïû•ÏÜå !== b.Ïû•ÏÜå) return a.Ïû•ÏÜå.localeCompare(b.Ïû•ÏÜå);
      if (a.ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨ !== b.ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨) return a.ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨.localeCompare(b.ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨);
      if (a.ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨ !== b.ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨) return a.ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨.localeCompare(b.ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨);
      return a.ÌíàÎ™©Î™Ö.localeCompare(b.ÌíàÎ™©Î™Ö);
    });

    rows.push({});
    rows.push({ ÌíàÎ™©Î™Ö: "=== ÌíàÎ™©Î≥Ñ Ï†ÑÏ≤¥ Ìï©Í≥Ñ ===" });
    Object.entries(itemTotals).forEach(([name, info]) => {
      rows.push({ ÌíàÎ™©Î™Ö: name, Ï¥ùÌï©Í≥Ñ: info.Ìï©Í≥Ñ, ...info.Ïû•ÏÜåÎ≥Ñ });
    });

    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Ïû¨Í≥†ÌòÑÌô©");
    XLSX.writeFile(wb, "Ïû¨Í≥†ÌòÑÌô©.xlsx");
  }

  /* ===== ÏàòÎüâ Ï¶ùÍ∞ê ===== */
  function handleUpdateItemCount(loc, cat, sub, idx, delta, sub2) {
    if (delta === 0) return;

    const list = getItems(inventory, loc, cat, sub, sub2);
    const itemName = list[idx]?.name;
    if (!itemName) return;

    setInventory((prev) => {
      const inv = JSON.parse(JSON.stringify(prev));
      const arr = ensureItems(inv, loc, cat, sub, sub2);
      if (arr[idx]) arr[idx].count = Math.max(0, (arr[idx].count || 0) + delta);
      return inv;
    });

    const now = new Date();
    const ts = now.toISOString();
    const time = now.toLocaleString();
    const subKey = subPath(sub, sub2);
    const dir = delta > 0 ? "IN" : "OUT";
    const mergeKey = `${loc}|${cat}|${subKey}|${itemName}|${dir}`;

    const mergeIdx = logs.findIndex((l) => l.key === mergeKey && now - new Date(l.ts) < 60 * 60 * 1000);

    if (mergeIdx > -1) {
      const target = logs[mergeIdx];
      const next = [...logs];
      next[mergeIdx] = {
        ...target,
        change: (target.change || 0) + delta,
        time,
        ts,
        operatorId: userId,
        operatorName: userName,
      };
      setLogs(next);
      update(ref(`logs/${target.id}`), {
        change: next[mergeIdx].change,
        time,
        ts,
        operatorId: userId,
        operatorName: userName,
      }).catch((err) => toast.error(`Î°úÍ∑∏ Î≥ëÌï© Ïã§Ìå®: ${err?.code || err?.message || err}`));
    } else {
      const logObj = {
        key: mergeKey,
        location: loc,
        category: cat,
        subcategory: subKey,
        item: itemName,
        change: delta,
        reason: "ÏûÖÏ∂úÍ≥†",
        time,
        ts,
        operatorId: userId,
        operatorName: userName,
      };
      setLogs((prev) => [{ id: `local-${ts}`, ...logObj }, ...prev]);
      const newRef = push(ref("logs/"));
      set(newRef, logObj).catch((err) => toast.error(`Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®: ${err?.code || err?.message || err}`));
    }
  }

  /* ===== Ïù¥Î¶Ñ/Î©îÎ™® Ìé∏Ïßë ===== */
  function handleEditItemName(loc, cat, sub, idx, sub2) {
    const list = getItems(inventory, loc, cat, sub, sub2);
    const oldName = list[idx]?.name;
    if (!oldName) return;
    const newName = prompt("ÏÉà ÌíàÎ™©Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:", oldName);
    if (!newName || newName === oldName) return;

    setInventory((prev) => {
      const inv = JSON.parse(JSON.stringify(prev));
      locations.forEach((L) => {
        const arr = ensureItems(inv, L, cat, sub, sub2);
        arr.forEach((it) => {
          if (it.name === oldName) it.name = newName;
        });
      });
      return inv;
    });
  }
  function handleEditItemNote(loc, cat, sub, idx, sub2) {
    setInventory((prev) => {
      const inv = JSON.parse(JSON.stringify(prev));
      const arr = ensureItems(inv, loc, cat, sub, sub2);
      if (!arr[idx]) return prev;
      const note = prompt("ÌäπÏù¥ÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:", arr[idx].note || "");
      if (note === null) return prev;
      arr[idx].note = note;
      return inv;
    });
  }

  /* ===== ÌíàÎ™© Ï∂îÍ∞Ä ===== */
  function handleAddNewItem(loc) {
    const catKeys = Object.keys(subcategories);
    const catPick = prompt("ÏÉÅÏúÑ Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤àÌò∏ ÏÑ†ÌÉù:\n" + catKeys.map((c, i) => `${i + 1}. ${c}`).join("\n"));
    const catIdx = Number(catPick);
    if (!Number.isInteger(catIdx) || catIdx < 1 || catIdx > catKeys.length) return toast.error("Ïò¨Î∞îÎ•∏ Î≤àÌò∏Í∞Ä ÏïÑÎãôÎãàÎã§.");
    const cat = catKeys[catIdx - 1];

    const subs = subcategories[cat];
    const subList = Array.isArray(subs) ? subs : Object.keys(subs);
    if (subList.length === 0) return toast.error("Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Îäî ÌïòÏúÑ Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§.");
    const subPick = prompt(`ÌïòÏúÑ Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤àÌò∏ ÏÑ†ÌÉù [${cat}]:\n` + subList.map((s, i) => `${i + 1}. ${s}`).join("\n"));
    const subIdx = Number(subPick);
    if (!Number.isInteger(subIdx) || subIdx < 1 || subIdx > subList.length) return toast.error("Ïò¨Î∞îÎ•∏ Î≤àÌò∏Í∞Ä ÏïÑÎãôÎãàÎã§.");
    const sub = subList[subIdx - 1];

    let sub2 = null;
    if (!Array.isArray(subs)) {
      const subs2Def = subs[sub];
      if (subs2Def && !Array.isArray(subs2Def)) {
        const sub2List = Object.keys(subs2Def);
        if (sub2List.length > 0) {
          const sub2Pick = prompt(`ÏµúÌïòÏúÑ Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤àÌò∏ ÏÑ†ÌÉù [${cat} > ${sub}]:\n` + sub2List.map((s, i) => `${i + 1}. ${s}`).join("\n"));
          const sub2Idx = Number(sub2Pick);
          if (!Number.isInteger(sub2Idx) || sub2Idx < 1 || sub2Idx > sub2List.length) return toast.error("Ïò¨Î∞îÎ•∏ Î≤àÌò∏Í∞Ä ÏïÑÎãôÎãàÎã§.");
          sub2 = sub2List[sub2Idx - 1];
        }
      }
    }

    const count = Number(prompt("Ï¥àÍ∏∞ ÏàòÎüâ ÏûÖÎ†•:"));
    if (isNaN(count) || count < 0) return toast.error("ÏàòÎüâÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.");

    const input = prompt("Ï∂îÍ∞ÄÌï† ÌíàÎ™©Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:");
    if (!input) return;
    const name = input.trim();

    const existsAnywhere = locations.some((L) => getItems(inventory, L, cat, sub, sub2).some((it) => (it.name || "") === name));
    if (existsAnywhere) return toast.error("ÎèôÏùºÌïú ÌíàÎ™©Î™ÖÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§");

    setInventory((prev) => {
      const inv = JSON.parse(JSON.stringify(prev));
      locations.forEach((L) => {
        const arr = ensureItems(inv, L, cat, sub, sub2);
        arr.push({ name, count: L === loc ? count : 0, note: "" });
      });
      return inv;
    });
    toast.success(`Ï∂îÍ∞ÄÎê®: [${cat} > ${sub}${sub2 ? " > " + sub2 : ""}] ${name} (${count}Í∞ú)`);
  }

  /* ===== Ï†ÑÏ≤¥ ÏÇ≠Ï†ú(Ïù¥Î¶Ñ) ===== */
  function handleDeleteItem() {
    const name = prompt("ÏÇ≠Ï†úÌï† ÌíàÎ™© Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:");
    if (!name) return;

    const foundDetails = [];
    let totalCount = 0;

    locations.forEach((L) => {
      Object.keys(inventory[L] || {}).forEach((cat) => {
        Object.keys(inventory[L][cat] || {}).forEach((sub) => {
          const node = inventory[L][cat][sub];
          if (Array.isArray(node)) {
            node.forEach((item) => {
              if (item.name === name) {
                const c = item.count || 0;
                totalCount += c;
                foundDetails.push({ L, cat, sub, sub2: null, count: c });
              }
            });
          } else if (node && typeof node === "object") {
            Object.keys(node).forEach((sub2) => {
              (node[sub2] || []).forEach((item) => {
                if (item.name === name) {
                  const c = item.count || 0;
                  totalCount += c;
                  foundDetails.push({ L, cat, sub, sub2, count: c });
                }
              });
            });
          }
        });
      });
    });

    if (totalCount === 0) return toast.error("Ìï¥Îãπ ÌíàÎ™©Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");

    setInventory((prev) => {
      const newInv = JSON.parse(JSON.stringify(prev));
      locations.forEach((L) => {
        Object.keys(newInv[L] || {}).forEach((cat) => {
          Object.keys(newInv[L][cat] || {}).forEach((sub) => {
            const node = newInv[L][cat][sub];
            if (Array.isArray(node)) {
              newInv[L][cat][sub] = node.filter((it) => it.name !== name);
            } else if (node && typeof node === "object") {
              Object.keys(node).forEach((sub2) => {
                node[sub2] = (node[sub2] || []).filter((it) => it.name !== name);
              });
            }
          });
        });
      });
      return newInv;
    });

    const now = new Date(), ts = now.toISOString(), time = now.toLocaleString();
    const logObj = {
      key: `Ï†ÑÏ≤¥||${name}|OUT`,
      location: "Ï†ÑÏ≤¥",
      category: "ÏÇ≠Ï†ú",
      subcategory: "",
      item: name,
      change: -totalCount,
      reason: "Ìï¥Îãπ ÌíàÎ™©ÏùÄ Ï¥ùÍ¥Ñ ÏÇ≠Ï†úÎê®",
      time,
      ts,
      operatorId: userId,
      operatorName: userName,
    };
    setLogs((prev) => [{ id: `local-${ts}`, ...logObj }, ...prev]);
    const newRef = push(ref("logs/"));
    set(newRef, logObj).catch((err) => toast.error(`ÏÇ≠Ï†ú Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®: ${err?.code || err?.message || err}`));

    const nonZero = foundDetails.filter((f) => f.count > 0);
    const lines = nonZero
      .slice(0, 8)
      .map(({ L, cat, sub, sub2, count }) => `‚Ä¢ ${L} > ${cat} > ${sub}${sub2 ? " > " + sub2 : ""} : ${count}Í∞ú`)
      .join("\n");
    const more = nonZero.length > 8 ? `\nÏô∏ ${nonZero.length - 8}Í∞ú Í≤ΩÎ°ú‚Ä¶` : "";
    toast.success(`ÏÇ≠Ï†úÎê®: ${name}\nÏ¥ù ${totalCount}Í∞ú\n\n${lines}${more}`, { style: { whiteSpace: "pre-line" } });
  }

  /* ===== Í≤ÄÏÉâ/ÏßëÍ≥Ñ ===== */
  const filtered = useMemo(() => {
    const q = (searchTerm || "").trim().toLowerCase();
    if (!q) return [];

    const out = [];
    Object.entries(inventory).forEach(([loc, cats]) => {
      Object.entries(cats || {}).forEach(([cat, subs]) => {
        if (Array.isArray(subs)) {
          subs.forEach((sub) => {
            const subL = (sub || "").toLowerCase();
            (getItems(inventory, loc, cat, sub) || []).forEach((i) => {
              const nameL = (i.name || "").toLowerCase();
              if (nameL.includes(q) || subL.includes(q)) out.push({ loc, cat, sub, sub2: null, ...i });
            });
          });
        } else {
          Object.entries(subs || {}).forEach(([sub, node]) => {
            const subL = (sub || "").toLowerCase();
            if (Array.isArray(node)) {
              (node || []).forEach((i) => {
                const nameL = (i.name || "").toLowerCase();
                if (nameL.includes(q) || subL.includes(q)) out.push({ loc, cat, sub, sub2: null, ...i });
              });
            } else if (node && typeof node === "object") {
              Object.entries(node).forEach(([sub2, arr]) => {
                const sub2L = (sub2 || "").toLowerCase();
                (arr || []).forEach((i) => {
                  const nameL = (i.name || "").toLowerCase();
                  if (nameL.includes(q) || subL.includes(q) || sub2L.includes(q)) out.push({ loc, cat, sub, sub2, ...i });
                });
              });
            }
          });
        }
      });
    });
    return out;
  }, [inventory, searchTerm]);

  const aggregated = useMemo(() => {
    const map = {};
    filtered.forEach((e) => {
      const k = `${e.cat}|${e.sub}|${e.sub2 || ""}|${e.name}`;
      if (!map[k]) map[k] = { cat: e.cat, sub: e.sub, sub2: e.sub2 || null, name: e.name, total: 0, locs: {} };
      map[k].locs[e.loc] = (map[k].locs[e.loc] || 0) + (e.count || 0);
      map[k].total += e.count || 0;
    });
    return Object.values(map);
  }, [filtered]);

  function scrollToCategory(loc, cat, sub, itemName, sub2 = null) {
    Object.keys(categoryRefs.current).forEach((k) => {
      if (k.startsWith(`${loc}-`)) {
        const el = categoryRefs.current[k];
        if (el?.tagName === "DETAILS") el.open = false;
      }
    });
    const ck = `${loc}-${cat}`;
    const sk = `${loc}-${cat}-${sub}`;
    const tk = sub2 ? `${loc}-${cat}-${sub}-${sub2}` : null;
    if (categoryRefs.current[ck]) categoryRefs.current[ck].open = true;
    if (categoryRefs.current[sk]) categoryRefs.current[sk].open = true;
    if (tk && categoryRefs.current[tk]) categoryRefs.current[tk].open = true;

    setTimeout(() => {
      const ik = `${loc}-${cat}-${sub}${sub2 ? "-" + sub2 : ""}-${itemName}`;
      const el = categoryRefs.current[ik];
      if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
    }, 80);
  }

  const stop = (e) => { e.preventDefault(); e.stopPropagation(); };
  const toggleEditMenu = (key, e) => { if (e) stop(e); setEditKey((prev) => (prev === key ? null : key)); };

  /* ===== Ïπ¥Îìú Î†åÎçî ÎèÑÏö∞ÎØ∏ ===== */
  const renderItemRow = (loc, cat, sub, it, idx, sub2) => {
    const rowKey = `${loc}|${cat}|${sub2 ? `${sub}/${sub2}` : sub}|${it.name}|${idx}`;
    const open = editKey === rowKey;
    const refKey = `${loc}-${cat}-${sub}${sub2 ? `-${sub2}` : ""}-${it.name}`;
    return (
      <li key={`${it.name}-${idx}`} className={`item-row ${open ? "is-editing" : ""}`} ref={(el) => { if (el) categoryRefs.current[refKey] = el; }} onClick={stop}>
        <div className="item-text">
          <span className="item-name">
            <span className="item-title">{it.name}</span>
            <span className="item-count">({it.count}Í∞ú)</span>
          </span>

          <div className="item-edit">
            <div className="edit-toolbar" onClick={stop}>
              <button className="btn btn-ghost btn-compact" onClick={(e) => { stop(e); handleUpdateItemCount(loc, cat, sub, idx, +1, sub2); }}>‚ûï ÏûÖÍ≥†</button>
              <button className="btn btn-ghost btn-compact" onClick={(e) => { stop(e); handleUpdateItemCount(loc, cat, sub, idx, -1, sub2); }}>‚ûñ Ï∂úÍ≥†</button>
              <button className="btn btn-ghost btn-compact" onClick={(e) => { stop(e); handleEditItemName(loc, cat, sub, idx, sub2); }}>‚úèÔ∏è Ïù¥Î¶Ñ</button>
              <button className="btn btn-ghost btn-compact" onClick={(e) => { stop(e); handleEditItemNote(loc, cat, sub, idx, sub2); }}>üìù Î©îÎ™®</button>
            </div>
          </div>

          {it.note && <div className="item-note">ÌäπÏù¥ÏÇ¨Ìï≠: {it.note}</div>}
        </div>

        <div className="item-actions">
          <button className="btn btn-secondary btn-compact" onClick={(e) => toggleEditMenu(rowKey, e)} title="Ïù¥ ÏïÑÏù¥ÌÖú ÏàòÏ†ï">
            {open ? "Îã´Í∏∞" : "ÏàòÏ†ï"}
          </button>
        </div>
      </li>
    );
  };

  const renderLocCardBody = (loc) => (
    Object.entries(subcategories).map(([cat, subs]) => (
      <details key={`${loc}-${cat}`} ref={(el) => (categoryRefs.current[`${loc}-${cat}`] = el)}>
        <summary className="summary">{catIcon(cat)} {cat}</summary>

        {Array.isArray(subs) ? (
          subs.map((sub) => (
            <details key={`${loc}-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`${loc}-${cat}-${sub}`] = el)} className="sub-details">
              <summary className="sub-summary">‚ñ∏ {sub}</summary>
              <ul className="item-list">
                {getItems(inventory, loc, cat, sub).map((it, idx) => renderItemRow(loc, cat, sub, it, idx))}
              </ul>
            </details>
          ))
        ) : (
          Object.entries(subs).map(([sub, subs2]) => (
            Array.isArray(subs2) ? (
              <details key={`${loc}-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`${loc}-${cat}-${sub}`] = el)} className="sub-details">
                <summary className="sub-summary">‚ñ∏ {sub}</summary>
                <ul className="item-list">
                  {getItems(inventory, loc, cat, sub).map((it, idx) => renderItemRow(loc, cat, sub, it, idx))}
                </ul>
              </details>
            ) : (
              <details key={`${loc}-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`${loc}-${cat}-${sub}`] = el)} className="sub-details">
                <summary className="sub-summary">‚ñ∏ {sub}</summary>
                {Object.keys(subs2).map((sub2) => (
                  <details key={`${loc}-${cat}-${sub}-${sub2}`} ref={(el) => (categoryRefs.current[`${loc}-${cat}-${sub}-${sub2}`] = el)} className="sub-details">
                    <summary className="sub-summary">‚ñ∏ {sub2}</summary>
                    <ul className="item-list">
                      {getItems(inventory, loc, cat, sub, sub2).map((it, idx) => renderItemRow(loc, cat, sub, it, idx, sub2))}
                    </ul>
                  </details>
                ))}
              </details>
            )
          ))
        )}
      </details>
    ))
  );

  const renderSummaryCardBody = () => (
    Object.entries(subcategories).map(([cat, subs]) => (
      <details key={`Ï†ÑÏ≤¥-${cat}`} ref={(el) => (categoryRefs.current[`Ï†ÑÏ≤¥-${cat}`] = el)}>
        <summary className="summary">{catIcon(cat)} {cat}</summary>

        {Array.isArray(subs) ? (
          subs.map((sub) => (
            <details key={`Ï†ÑÏ≤¥-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}`] = el)} className="sub-details">
              <summary className="sub-summary">‚ñ∏ {sub}</summary>
              <ul className="item-list">
                {Object.entries(
                  locations.reduce((acc, L) => {
                    getItems(inventory, L, cat, sub).forEach((it) => {
                      acc[it.name] = (acc[it.name] || 0) + (it.count || 0);
                    });
                    return acc;
                  }, {})
                ).map(([name, count]) => (
                  <li key={`Ï†ÑÏ≤¥-${cat}-${sub}-${name}`} className="item-row" ref={(el) => { if (el) categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}-${name}`] = el; }} onClick={stop}>
                    <div className="item-text">
                      <span className="item-name">
                        <span className="item-title">{name}</span>
                        <span className="item-count">({count}Í∞ú)</span>
                      </span>
                    </div>
                  </li>
                ))}
              </ul>
            </details>
          ))
        ) : (
          Object.entries(subs).map(([sub, subs2]) => (
            Array.isArray(subs2) ? (
              <details key={`Ï†ÑÏ≤¥-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}`] = el)} className="sub-details">
                <summary className="sub-summary">‚ñ∏ {sub}</summary>
                <ul className="item-list">
                  {Object.entries(
                    locations.reduce((acc, L) => {
                      getItems(inventory, L, cat, sub).forEach((it) => {
                        acc[it.name] = (acc[it.name] || 0) + (it.count || 0);
                      });
                      return acc;
                    }, {})
                  ).map(([name, count]) => (
                    <li key={`Ï†ÑÏ≤¥-${cat}-${sub}-${name}`} className="item-row" ref={(el) => { if (el) categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}-${name}`] = el; }} onClick={stop}>
                      <div className="item-text">
                        <span className="item-name">
                          <span className="item-title">{name}</span>
                          <span className="item-count">({count}Í∞ú)</span>
                        </span>
                      </div>
                    </li>
                  ))}
                </ul>
              </details>
            ) : (
              <details key={`Ï†ÑÏ≤¥-${cat}-${sub}`} ref={(el) => (categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}`] = el)} className="sub-details">
                <summary className="sub-summary">‚ñ∏ {sub}</summary>
                {Object.keys(subs2).map((sub2) => (
                  <details key={`Ï†ÑÏ≤¥-${cat}-${sub}-${sub2}`} ref={(el) => (categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}-${sub2}`] = el)} className="sub-details">
                    <summary className="sub-summary">‚ñ∏ {sub2}</summary>
                    <ul className="item-list">
                      {Object.entries(
                        locations.reduce((acc, L) => {
                          getItems(inventory, L, cat, sub, sub2).forEach((it) => {
                            acc[it.name] = (acc[it.name] || 0) + (it.count || 0);
                          });
                          return acc;
                        }, {})
                      ).map(([name, count]) => (
                        <li key={`Ï†ÑÏ≤¥-${cat}-${sub}-${sub2}-${name}`} className="item-row" ref={(el) => { if (el) categoryRefs.current[`Ï†ÑÏ≤¥-${cat}-${sub}-${sub2}-${name}`] = el; }} onClick={stop}>
                          <div className="item-text">
                            <span className="item-name">
                              <span className="item-title">{name}</span>
                              <span className="item-count">({count}Í∞ú)</span>
                            </span>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </details>
                ))}
              </details>
            )
          ))
        )}
      </details>
    ))
  );

  /* ===== Î†åÎçî ===== */
  return (
    <main className="stage main">
      <FixedBg src={`${process.env.PUBLIC_URL}/DRONE_SOCCER_DOKKEBI2-Photoroom.png`} overlay="rgba(0,0,0,.18)" />
      <NeonBackdrop />
      <header className="topbar glass">
      {/* PATCH: src/App.js (Home Ìó§Îçî ÌÉÄÏù¥ÌãÄ ÍµêÏ≤¥)*/}
      <h1 className="logo">
        <span className="glow-dot" /> DOKKEBI<span className="thin">/</span>INVENTORY
        <button
          type="button"
          className="ver-chip"
          title={`Î≤ÑÏ†Ñ: ${APP_VERSION}${isAdmin ? " (ÎçîÎ∏îÌÅ¥Î¶≠ÌïòÏó¨ ÎùºÎ≤® Î≥ÄÍ≤Ω)" : ""}`}
          onDoubleClick={() => {
            if (!isAdmin) return;
            const next = prompt(
              "Î≤ÑÏ†Ñ ÌëúÏãúÏóê ÏÇ¨Ïö©Ìï† ÎùºÎ≤®ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: 1.0.5):",
              localStorage.getItem("do-kkae-bi-app-version") || APP_VERSION
            );
            if (next === null) return;
            localStorage.setItem("do-kkae-bi-app-version", String(next).trim());
            window.location.reload();
          }}
        >
          v{APP_VERSION}
        </button>
      </h1>
        <div className="toolbar">
          <input
            className="search-input"
            type="text"
            placeholder="Í≤ÄÏÉâ: ÌíàÎ™©/ÌïòÏúÑ/ÏµúÌïòÏúÑ‚Ä¶"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onFocus={() => setTimeout(() => window.scrollTo({ top: 0, behavior: "smooth" }), 100)}
          />

          <div className="menu-wrap" ref={dataMenuRef}>
            <button
              className="btn btn-secondary"
              onClick={() => setDataMenuOpen((v) => !v)}
              aria-haspopup="menu"
              aria-expanded={dataMenuOpen}
            >
              üì¶ Îç∞Ïù¥ÌÑ∞
            </button>
          {/*PATCH: src/App.js (Îç∞Ïù¥ÌÑ∞ Î©îÎâ¥ JSX ÍµêÏ≤¥: ÏÇºÌï≠/Ï§ëÍ¥ÑÌò∏ Ï†ïÏ†ï + Ïà®ÍπÄ input ÏúÑÏπò Í≥†Ï†ï)*/}
          {dataMenuOpen && (
            <div className="menu" role="menu" onClick={(e) => e.stopPropagation()}>
              <button
                className="menu-item"
                onClick={() => { exportInventoryExcel(); setDataMenuOpen(false); }}
              >
                üì§ Ïû¨Í≥† Excel ÎÇ¥Î≥¥ÎÇ¥Í∏∞
              </button>

              {isAdmin ? (
                <button
                  className="menu-item"
                  onClick={handleImportClick}
                  title="CSV/XLSXÏóêÏÑú Ïû¨Í≥†Î•º ÏùºÍ¥Ñ Ï∂îÍ∞ÄÌï©ÎãàÎã§(Î°úÍ∑∏ ÎØ∏ÏÉùÏÑ±)"
                >
                  üì• ÏùºÍ¥Ñ Ï∂îÍ∞Ä (Î≤†ÌÉÄ)
                </button>
              ) : (
                <button className="menu-item disabled" disabled title="Í¥ÄÎ¶¨Ïûê Ï†ÑÏö©">
                  üì• Í∞ÄÏ†∏Ïò§Í∏∞ (Î≤†ÌÉÄ)
                </button>
              )}

              {/* Ïà®ÍπÄ ÌååÏùº ÏûÖÎ†• ‚Äî ÏÇºÌï≠ Î∞ñ, Î©îÎâ¥ ÎÇ¥Î∂ÄÏóê Í≥†Ï†ï */}
              <input
                ref={importInputRef}
                type="file"
                accept=".xlsx,.csv"
                style={{ display: "none" }}
                onChange={onImportFileChange}
              />
            </div>
          )}
          </div>

          <button className="btn btn-secondary" onClick={() => navigate("/logs")}>
            üìò Í∏∞Î°ù
          </button>

          {(isAdmin || (userId && userName)) && (
            <button
              className="btn btn-ghost"
              onClick={() => {
                hardLogout();   
              }}
            >
              üö™ Î°úÍ∑∏ÏïÑÏõÉ
            </button>
          )}
        </div>
      </header>

      {syncing && (
        <div className="sync-indicator">
          <span className="spinner" /> Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî‚Ä¶
        </div>
      )}

      {/* Í≤ÄÏÉâ Í≤∞Í≥º */}
      {searchTerm && (
        <section className="panel glass lift-in">
          <h3 className="panel-title">üîç Í≤ÄÏÉâ Í≤∞Í≥º</h3>
          {aggregated.length === 0 ? (
            <p className="muted">Í≤ÄÏÉâÎêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
          ) : (
            <>
              <ul className="result-list">
                {aggregated.map((e, i) => (
                  <li key={i} className="result-item">
                    <div className="result-name link" onClick={() => scrollToCategory("Ï†ÑÏ≤¥", e.cat, e.sub, e.name, e.sub2)}>
                      [{e.cat} &gt; {e.sub}{e.sub2 ? ` > ${e.sub2}` : ""}] {e.name} <span className="chip">{e.total}Í∞ú</span>
                    </div>
                    <div className="result-locs">
                      {locations.map((L) => (
                        <button
                          key={L}
                          className="link pill"
                          onClick={() => scrollToCategory(L, e.cat, e.sub, e.name, e.sub2)}
                          title={`${L}Î°ú Ïù¥Îèô`}
                        >
                          {L}: {e.locs[L] || 0}
                        </button>
                      ))}
                    </div>
                  </li>
                ))}
              </ul>
              <div className="right">
                <button
                  className="btn btn-secondary"
                  onClick={() => {
                    const txt = aggregated
                      .map(
                        (e) =>
                          `[${e.cat}>${e.sub}${e.sub2 ? ">" + e.sub2 : ""}] ${e.name} (Ï¥ù ${e.total}Í∞ú) ` +
                          locations.map((L) => `${L}:${e.locs[L] || 0}`).join(" / ")
                      )
                      .join("\n");
                    navigator.clipboard.writeText(txt);
                    toast.success("Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§");
                  }}
                >
                  üìã Ï†ÑÏ≤¥ Î≥µÏÇ¨
                </button>
              </div>
            </>
          )}
        </section>
      )}

      {/* Ïπ¥Îìú Í∑∏Î¶¨Îìú (Ïû•ÏÜå 3 + Ï†ÑÏ≤¥ 1 = 2√ó2 Î∞∞Ïó¥, ‚â•1100pxÏóêÏÑú Ï†ÑÏ≤¥ Ï§ëÏïô) */}
      <section className="grid summary-grid">
        {/* Ïû•ÏÜå Ïπ¥Îìú */}
        {locations.map((loc) => (
          <div key={loc} className="card glass hover-rise" ref={(el) => (cardRefs.current[loc] = el)}>
          <div className="card-head head-split">
            <button
              type="button"
              className="head-zoom"
              onClick={() => setOpenPanel({ kind: "loc", loc })}
              title="ÌôïÎåÄÎ≥¥Í∏∞"
              aria-label={`${loc} ÌôïÎåÄÎ≥¥Í∏∞`}
            >
              <h2 className="card-title">{loc}</h2>
              <span className="head-hint">ÌôïÎåÄÎ≥¥Í∏∞</span>
            </button>
            <div className="head-actions">
              <button
                className="btn btn-primary"
                onClick={(e) => { e.stopPropagation(); handleAddNewItem(loc); }}
              >
                +Ï∂îÍ∞Ä
              </button>
            </div>
          </div>
            <div className="card-body">
              {renderLocCardBody(loc)}
            </div>
         </div>
        ))}
        

        {/* Ï†ÑÏ≤¥ Ïπ¥Îìú (ÏöîÏïΩ) */}
        <div className="card glass hover-rise card--summary" ref={(el) => (cardRefs.current["summary"] = el)}>
          <div className="card-head head-split">
            <button
              type="button"
              className="head-zoom"
              onClick={() => setOpenPanel({ kind: "summary" })}
              title="Ï†ÑÏ≤¥ ÌôïÎåÄÎ≥¥Í∏∞"
              aria-label="Ï†ÑÏ≤¥ ÌôïÎåÄÎ≥¥Í∏∞"
            >
              <h2 className="card-title">Ï†ÑÏ≤¥</h2>
              <span className="head-hint">ÌôïÎåÄÎ≥¥Í∏∞</span>
            </button>
            <div className="head-actions">
              <button className="btn btn-danger" onClick={(e) => { e.stopPropagation(); handleDeleteItem(); }}>
                /ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
            <div className="card-body">
              {renderSummaryCardBody()}
          </div>
        </div>
      </section>

      {/* ÌôïÎåÄÎ≥¥Í∏∞ ÌåùÏóÖ */}
      {openPanel && (
        <div className="overlay" onClick={() => setOpenPanel(null)}>
          <div className="popup glass neon-rise" onClick={(e) => e.stopPropagation()}>
            <div className="popup-head">
              <h3 className="popup-title">
                {openPanel.kind === "summary" ? "Ï†ÑÏ≤¥ (ÌôïÎåÄ Î≥¥Í∏∞)" : `${openPanel.loc} (ÌôïÎåÄ Î≥¥Í∏∞)`}
              </h3>
              <button className="btn btn-ghost" onClick={() => setOpenPanel(null)}>Îã´Í∏∞</button>
            </div>

            <div className="popup-body">
              {openPanel.kind === "summary" ? (
                renderSummaryCardBody()
              ) : (
                renderLocCardBody(openPanel.loc)
              )}
            </div>
          </div>
        </div>
      )}

      <footer className="site-footer">
        <p>
          ¬© Í∞ïÏõêÎèÑÎ¶ΩÎåÄ ÎìúÎ°†ÏúµÌï©Í≥º 24ÌïôÎ≤à ÏµúÏÑùÎØº - ÎìúÎ°†Ï∂ïÍµ¨Îã® Ïû¨Í≥†¬∑ÏûÖÏ∂úÍ≥† Í¥ÄÎ¶¨ ÏΩòÏÜî<br />
          Î¨∏Ïùò: <a href="mailto:gwdokkebinv@gmail.com">gwdokkebinv@gmail.com</a>
        </p>
      </footer>
    </main>
  );
}

/* =========================
   6) Í∏∞Î°ù ÌéòÏù¥ÏßÄ
   ========================= */
function LogsPage({ logs, setLogs }) {
  const [syncing, setSyncing] = useState(false);
  const navigate = useNavigate();
  const [filterDate, setFilterDate] = useState("");
  const [exportOpen, setExportOpen] = useState(false);
  const [itemKeyword, setItemKeyword] = useState("");
  const [locationFilter, setLocationFilter] = useState("");
  const menuRef = useRef(null);

  useEffect(() => saveLocalLogs(logs), [logs]);

  useEffect(() => {
    setSyncing(true);
    const t = setTimeout(() => setSyncing(false), 700);
    return () => clearTimeout(t);
  }, [logs]);

  const sorted = useMemo(() => [...logs].sort((a, b) => new Date(b.ts) - new Date(a.ts)), [logs]);

  const filteredList = useMemo(() => {
    let list = sorted;
    if (filterDate) list = list.filter((l) => l.ts.slice(0, 10) === filterDate);
    if (locationFilter) list = list.filter((l) => l.location === locationFilter);
    if (itemKeyword.trim()) {
      const q = itemKeyword.trim().toLowerCase();
      list = list.filter((l) => (l.item || "").toLowerCase().includes(q));
    }
    return list;
  }, [sorted, filterDate, locationFilter, itemKeyword]);

  const grouped = useMemo(
    () =>
      filteredList.reduce((acc, l) => {
        const day = l.ts.slice(0, 10);
        (acc[day] = acc[day] || []).push(l);
        return acc;
      }, {}),
    [filteredList]
  );
  const dates = useMemo(() => Object.keys(grouped).sort((a, b) => new Date(b) - new Date(a)), [grouped]);

  function formatLabel(d) {
    const diff = Math.floor((new Date() - new Date(d)) / (1000 * 60 * 60 * 24));
    return diff === 0 ? "Ïò§Îäò" : diff === 1 ? "Ïñ¥Ï†ú" : d;
  }

  function editReason(i) {
    if (!logs[i]?.id) { toast.error("ÎèôÍ∏∞Ìôî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî."); return; }
    const note = prompt("Î©îÎ™®:", logs[i].reason || "");
    if (note === null) return;

    const id = logs[i].id;
    const next = [...logs];
    next[i].reason = note;
    setLogs(next);
    update(ref(`logs/${id}`), { reason: note })
      .then(() => toast.success("Î©îÎ™® Ï†ÄÏû•Îê®"))
      .catch((err) => toast.error(`ÌÅ¥ÎùºÏö∞Îìú ÎèôÍ∏∞Ìôî Ïã§Ìå®: ${err?.code || err?.message || err}`));
  }

  function deleteLog(i) {
    if (!logs[i]?.id) { toast.error("ÎèôÍ∏∞Ìôî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî."); return; }
    if (!window.confirm("ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) return;

    const id = logs[i].id;
    setLogs((prev) => prev.filter((_, j) => j !== i));
    remove(ref(`logs/${id}`))
      .then(() => toast.success("Î°úÍ∑∏ ÏÇ≠Ï†úÎê®"))
      .catch((err) => toast.error(`ÌÅ¥ÎùºÏö∞Îìú ÎèôÍ∏∞Ìôî Ïã§Ìå®: ${err?.code || err?.message || err}`));
  }

  function exportCSV() {
    const data = filteredList.map((l) => ({
      ÏãúÍ∞Ñ: l.time, ID: l.operatorId || "", Ïù¥Î¶Ñ: l.operatorName || "", Ïû•ÏÜå: l.location,
      ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: l.category, ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: l.subcategory, ÌíàÎ™©: l.item, Ï¶ùÍ∞ê: l.change, Î©îÎ™®: l.reason,
    }));
    const csv = XLSX.utils.sheet_to_csv(XLSX.utils.json_to_sheet(data));
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = "Í∏∞Î°ù.csv"; a.click();
  }
  function exportExcel() {
    const data = filteredList.map((l) => ({
      ÏãúÍ∞Ñ: l.time, ID: l.operatorId || "", Ïù¥Î¶Ñ: l.operatorName || "", Ïû•ÏÜå: l.location,
      ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: l.category, ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨: l.subcategory, ÌíàÎ™©: l.item, Ï¶ùÍ∞ê: l.change, Î©îÎ™®: l.reason,
    }));
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Logs");
    XLSX.writeFile(wb, "Í∏∞Î°ù.xlsx");
  }

  return (
    <main className="stage main">
      <FixedBg src={`${process.env.PUBLIC_URL}/DRONE_SOCCER_DOKKEBI2-Photoroom.png`} overlay="rgba(0,0,0,.22)" />
      <NeonBackdrop />

      <header className="topbar glass">
        <button className="btn btn-ghost" onClick={() => navigate("/")}>‚Üê ÎèåÏïÑÍ∞ÄÍ∏∞</button>
        <h1 className="logo">üìòÏûÖÏ∂úÍ≥† Í∏∞Î°ù</h1>

        <div className="toolbar">
          <input className="search-input" type="text" value={itemKeyword} onChange={(e) => setItemKeyword(e.target.value)} placeholder="ÌíàÎ™© Í≤ÄÏÉâ (Î∂ÄÎ∂Ñ ÏùºÏπò)" />
          <select className="search-input" value={locationFilter} onChange={(e) => setLocationFilter(e.target.value)} aria-label="Ïû•ÏÜå ÌïÑÌÑ∞">
            <option value="">Ï†ÑÏ≤¥ Ïû•ÏÜå</option>
            {locations.map((L) => (<option key={L} value={L}>{L}</option>))}
          </select>
          <input type="date" value={filterDate} onChange={(e) => setFilterDate(e.target.value)} className="search-input" />

          <button className="btn btn-secondary" onClick={() => { setFilterDate(""); setItemKeyword(""); setLocationFilter(""); }}>
            ÌïÑÌÑ∞ Ìï¥Ï†ú
          </button>

          <div className="menu-wrap" ref={menuRef}>
            <button className="btn btn-secondary" onClick={() => setExportOpen((v) => !v)} aria-haspopup="menu" aria-expanded={exportOpen}>
              ‚¨á ÎÇ¥Î≥¥ÎÇ¥Í∏∞
            </button>
            {exportOpen && (
              <div className="menu menu-logs" role="menu">
                <button className="menu-item" onClick={() => { exportCSV(); setExportOpen(false); }}>üìÑ CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞</button>
                <button className="menu-item" onClick={() => { exportExcel(); setExportOpen(false); }}>üìë Excel ÎÇ¥Î≥¥ÎÇ¥Í∏∞</button>
              </div>
            )}
          </div>
        </div>
      </header>

      {syncing && (
        <div className="sync-indicator">
          <span className="spinner" /> Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî‚Ä¶
        </div>
      )}

      {dates.length === 0 ? (
        <section className="panel glass lift-in">
          <p className="muted">Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.</p>
        </section>
      ) : (
        dates.map((d) => (
          <section key={d} className="panel glass lift-in">
            <h2 className="panel-title">{formatLabel(d)}</h2>
            <ul className="log-list">
              {grouped[d].map((l, i) => {
                const idx = logs.findIndex((x) => x.ts === l.ts && x.key === l.key);
                return (
                  <li key={`${l.id || "local"}-${i}`} className="log-row">
                    <div className="log-text">
                      <div className="log-line">
                        <span className="time">[{l.time}]</span> {l.location} &gt; {l.category} &gt; {l.subcategory} / <strong>{l.item}</strong>
                      </div>
                      <div className={l.change > 0 ? "mark in" : "mark out"}>
                        {l.change > 0 ? `ÏûÖÍ≥† +${l.change}` : `Ï∂úÍ≥† -${-l.change}`}
                      </div>
                      <div className="muted small">üë§ {l.operatorId ? `[${l.operatorId}]` : ""} {l.operatorName || ""}</div>
                      {l.reason && <div className="log-note">Î©îÎ™®: {l.reason}</div>}
                    </div>
                    <div className="log-actions">
                      <button className="btn btn-ghost" onClick={() => editReason(idx)}>{l.reason ? "Î©îÎ™® ÏàòÏ†ï" : "Î©îÎ™® Ï∂îÍ∞Ä"}</button>
                      <button className="btn btn-danger" onClick={() => deleteLog(idx)}>ÏÇ≠Ï†ú</button>
                    </div>
                  </li>
                );
              })}
            </ul>
          </section>
        ))
      )}
    </main>
  );
}

/* =========================
   7) AppWrapper (Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî)
   ========================= */
export default function AppWrapper() {
  const [inventory, setInventory] = useState(getLocalInventory);
  const [searchTerm, setSearchTerm] = useState("");
  const [logs, setLogs] = useState(getLocalLogs);
  const isAdmin = getLocalAdmin();
  const userId = getLocalUserId();
  const userName = getLocalUserName();

  // ‚¨áÔ∏è Ï∂îÍ∞Ä: Î°úÍ∑∏Ïù∏/ÏÑ∏ÏÖò Ï°¥Ïû¨ Ïó¨Î∂Ä
  const isLoggedIn = isAdmin || (userId && userName);

  const applyingCloudRef = useRef({ inv: false, logs: false });
  const invStateRef = useRef(inventory);
  const logsStateRef = useRef(logs);
  // PATCH: src/App.js (AppWrapper ÎÇ¥Î∂Ä, ÏÉÅÌÉú ÏÑ†Ïñ∏Îì§ Îã§ÏùåÏóê Ï∂îÍ∞Ä)
useEffect(() => {
  const el = document.getElementById("app-splash");
  if (el) {
    el.classList.add("hide");
    setTimeout(() => el.remove(), 400);
  }
}, []);

  useEffect(() => { invStateRef.current = inventory; }, [inventory]);
  useEffect(() => { logsStateRef.current = logs; }, [logs]);

  // ÌÅ¥ÎùºÏö∞Îìú‚ÜíÎ°úÏª¨
  useEffect(() => {
    const invRefFB = ref("inventory/");
    const logRefFB = ref("logs/");

    const unsubInv = onValue(invRefFB, (snap) => {
      if (!snap.exists()) return;
      const cloud = snap.val();
      if (JSON.stringify(cloud) !== JSON.stringify(invStateRef.current)) {
        applyingCloudRef.current.inv = true;
        setInventory(cloud);
      }
    });

    const unsubLogs = onValue(logRefFB, (snap) => {
      if (!snap.exists()) return;
      const normalized = normalizeLogsVal(snap.val()).sort((a, b) => new Date(b.ts) - new Date(a.ts));
      if (JSON.stringify(normalized) !== JSON.stringify(logsStateRef.current)) {
        applyingCloudRef.current.logs = true;
        setLogs(normalized);
      }
    });

    return () => { unsubInv(); unsubLogs(); };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Î°úÏª¨‚ÜíÌÅ¥ÎùºÏö∞Îìú (inventory set Ï†ÑÏ≤¥ Ï†ÄÏû•)
    // PATCH: src/App.js (AppWrapper ÎÇ¥Î∂Ä, inventory Ï†ÄÏû• useEffect ÍµêÏ≤¥)
    useEffect(() => {
      if (applyingCloudRef.current.inv) { applyingCloudRef.current.inv = false; return; }

      const { inv: safeInv, bad } = sanitizeInventoryKeys(inventory);
      if (bad.length) {
        console.warn("[Inventory sanitize] removed invalid keys:", bad.slice(0, 20), bad.length > 20 ? `‚Ä¶(+${bad.length-20})` : "");
      }

      saveLocalInventory(safeInv);
      set(ref("inventory/"), safeInv).catch((err) => {
        console.error("Firebase set failed:", err);
        toast.error("ÌÅ¥ÎùºÏö∞Îìú Ï†ÄÏû• Ïã§Ìå®: ÏûòÎ™ªÎêú ÌÇ§Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.");
      });
    }, [inventory]);


  // 10Î∂Ñ Î¨¥ÌôúÎèô ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ(ÏÑ†ÌÉùÏ†Å)
  useEffect(() => {
    if (!isAdmin) return;
    const LOGOUT_AFTER = 10 * 60 * 1000;
    let timer;
    const reset = () => {
      clearTimeout(timer);
      timer = setTimeout(() => {
      hardLogout();   
      }, LOGOUT_AFTER);
    };
    const events = ["mousemove", "keydown", "click", "touchstart", "scroll", "visibilitychange"];
    events.forEach((t) => document.addEventListener(t, reset, { passive: true }));
    reset();
    return () => {
      clearTimeout(timer);
      events.forEach((t) => document.removeEventListener(t, reset));
    };
  }, [isAdmin]);

  return (
    <>
      <Toaster
        position="bottom-right"
        toastOptions={{
          style: { background: "#0b1020", color: "#e6f7ff", border: "1px solid #243056", borderRadius: "14px", fontWeight: 600, fontSize: "1.02rem" },
          success: { style: { background: "#07101f", color: "#53ffe9" } },
          error: { style: { background: "#160b12", color: "#ff7ba1" } },
        }}
      />
      <Router>
        <Routes>
          {/* ‚¨áÔ∏è Î°úÍ∑∏Ïù∏ ÏïàÎèº ÏûàÏúºÎ©¥ Î¨¥Ï°∞Í±¥ /login ÏúºÎ°ú Î≥¥ÎÉÑ */}
          <Route
            path="/"
            element={
              isLoggedIn ? (
                <Home
                  inventory={inventory}
                  setInventory={setInventory}
                  searchTerm={searchTerm}
                  setSearchTerm={setSearchTerm}
                  logs={logs}
                  setLogs={setLogs}
                  isAdmin={isAdmin}
                  userId={userId}
                  userName={userName}
                />
              ) : (
                <Navigate to="/login" replace />
              )
            }
          />

          <Route
            path="/logs"
            element={
              isLoggedIn ? (
                <LogsPage logs={logs} setLogs={setLogs} />
              ) : (
                <Navigate to="/login" replace />
              )
            }
          />

          {/* ‚¨áÔ∏è Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏Îèº ÏûàÏúºÎ©¥ / Î°ú ÎêòÎèåÎ¶º */}
          <Route
            path="/login"
            element={
              isLoggedIn ? (
                <Navigate to="/" replace />
              ) : (
                <LoginPage
                  onLogin={({ pw, uid, name }) => {
                    if (pw === "2500" && uid && name) {
                      saveLocalAdmin(true);
                      localStorage.setItem("do-kkae-bi-user-id", uid);
                      localStorage.setItem("do-kkae-bi-user-name", name);
                      window.location.hash = "#/";
                      window.location.reload();
                    } else {
                      toast.error("ÏûÖÎ†• Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.");
                    }
                  }}
                />
              )
            }
          />
          <Route
            path="*"
            element={<Navigate to={isLoggedIn ? "/" : "/login"} replace />}
          />
        </Routes>
      </Router>
    </>
  );
}

export { Home };
